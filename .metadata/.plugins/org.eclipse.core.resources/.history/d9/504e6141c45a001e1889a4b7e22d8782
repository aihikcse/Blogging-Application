package org.blogg.security;

import java.io.IOException;

import org.modelmapper.internal.bytebuddy.asm.Advice.This;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.web.authentication.WebAuthenticationDetailsSource;
import org.springframework.stereotype.Component;
import org.springframework.web.filter.OncePerRequestFilter;

import io.jsonwebtoken.ExpiredJwtException;
import io.jsonwebtoken.MalformedJwtException;
import jakarta.servlet.FilterChain;
import jakarta.servlet.ServletException;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;

@Component
public class JwtAuthenticationFilter extends OncePerRequestFilter{
	
	@Autowired
	private UserDetailsService userDetailService;
	
	@Autowired
	private JwtTokenHelper jwtTokenHelper;

	@Override
	protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain)
			throws ServletException, IOException {
		String requestToken = request.getHeader("Authorization");
		
		String username = null;

		String token = null;

		if (requestToken != null && requestToken.startsWith("Bearer")) { 
			
			token = requestToken.substring(7);


			try {
				username = this.jwtTokenHelper.getUsernameFromToken(token); 
			} catch (IllegalArgumentException e) {
				System.out.println("Unable to get Jwt token"); 
			} catch (ExpiredJwtException e) {
				System.out.println("Jwt token has expired");	
			} catch (MalformedJwtException e) { 
				System.out.println("invalid jwt");
			}
		}
		else {
			System.out.println("Jwt token does not begin with Bearer");
		}
		
		//once we get the token , Validate
		
		if(username!=null && SecurityContextHolder.getContext().getAuthentication() == null) {
			UserDetails userDetails = userDetailService.loadUserByUsername(username);
			
			if (this.jwtTokenHelper.validateToken(token, userDetails)) {
				
				//authentication
				
                UsernamePasswordAuthenticationToken usernamePasswordAuthenticationToken = new UsernamePasswordAuthenticationToken(userDetails, null, userDetails.getAuthorities());
                //UsernamePasswordAuthenticationToken authentication = new UsernamePasswordAuthenticationToken(userDetails, null, Arrays.asList(new SimpleGrantedAuthority("ROLE_ADMIN")));
                usernamePasswordAuthenticationToken.setDetails(new WebAuthenticationDetailsSource().buildDetails(request));
                //logger.info("authenticated user " + username + ", setting security context");
                //SecurityContextHolder.getContext().setAuthentication(authentication);
                
            }else {
				System.out.println("Invalid Jwt Token ");
			}
			
			
		}else {
			System.out.println("Username is null or context is not null ");
		}
		
		filterChain.doFilter(request, response);
	}

}
